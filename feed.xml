<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://machxnu.github.io/</id><title>MachXNU</title><subtitle></subtitle> <updated>2025-04-13T11:15:20+02:00</updated> <author> <name>MachXNU</name> <uri>https://machxnu.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://machxnu.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://machxnu.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2025 MachXNU </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Run Android apps in a debugger without root</title><link href="https://machxnu.github.io/posts/Debugger-Android-no-root/" rel="alternate" type="text/html" title="Run Android apps in a debugger without root" /><published>2025-04-11T14:00:00+02:00</published> <updated>2025-04-11T14:00:00+02:00</updated> <id>https://machxnu.github.io/posts/Debugger-Android-no-root/</id> <content src="https://machxnu.github.io/posts/Debugger-Android-no-root/" /> <author> <name>MachXNU</name> </author> <summary> Introduction In this article, I will explain how to run a compiled third-party Android app in a debugger like lldb on a non-rooted device. Prerequisites Install Android Studio and download the SDK and NDK. I won’t go into much details about how to do this. You can check that the installation was successfull if : you can run adb you have the NDK installed (on macOS with default settings... </summary> </entry> <entry><title>Frida Gadget/Objection on iOS 18</title><link href="https://machxnu.github.io/posts/Frida-gadget-on-iOS-18/" rel="alternate" type="text/html" title="Frida Gadget/Objection on iOS 18" /><published>2025-03-30T18:00:00+02:00</published> <updated>2025-03-30T18:00:00+02:00</updated> <id>https://machxnu.github.io/posts/Frida-gadget-on-iOS-18/</id> <content src="https://machxnu.github.io/posts/Frida-gadget-on-iOS-18/" /> <author> <name>MachXNU</name> </author> <summary> Introduction Running Frida gadget on (jailed) iOS 18 can be suprisingly more difficult that expected. In this article, I am providing a full method to get Frida Gadget running on such a device. Prerequisites a device running iOS 18 a Mac Xcode (can be Xcode 15+) Sideloadly Objection Steps 1) Get a decrypted IPA You can get a decrypted IPA for your app at armconverter.com/decrypte... </summary> </entry> <entry><title>Cross-compiling radare2 for armhf and Buildroot</title><link href="https://machxnu.github.io/posts/Cross-compiling-radare2-for-armhf-and-Buildroot/" rel="alternate" type="text/html" title="Cross-compiling radare2 for armhf and Buildroot" /><published>2025-02-16T14:00:00+01:00</published> <updated>2025-02-16T15:51:16+01:00</updated> <id>https://machxnu.github.io/posts/Cross-compiling-radare2-for-armhf-and-Buildroot/</id> <content src="https://machxnu.github.io/posts/Cross-compiling-radare2-for-armhf-and-Buildroot/" /> <author> <name>MachXNU</name> </author> <summary> Introduction In this article, we will learn how to compile radare2 for armhf using Buildroot’s toolchain (note that this can be adapted to any other cross-toolchain you have, either you got it from your package manager, or with Crosstool-NG). I assume you are familiar with Buildroot and already know how to use it to build a Linux system. Steps First, clone the radare2 repo: $ git clone https:... </summary> </entry> <entry><title>Enabling framebuffer on qemu_arm_versatile and Buildroot</title><link href="https://machxnu.github.io/posts/Enabling-framebuffer-on-qemu_arm_versatile-and-buildroot/" rel="alternate" type="text/html" title="Enabling framebuffer on qemu_arm_versatile and Buildroot" /><published>2025-02-09T16:00:00+01:00</published> <updated>2025-02-10T13:32:48+01:00</updated> <id>https://machxnu.github.io/posts/Enabling-framebuffer-on-qemu_arm_versatile-and-buildroot/</id> <content src="https://machxnu.github.io/posts/Enabling-framebuffer-on-qemu_arm_versatile-and-buildroot/" /> <author> <name>MachXNU</name> </author> <summary> Introduction When using the default Buildroot target qemu_arm_versatile, no display is enabled: That’s sad and disappointing In this tutorial, we will learn how to get the kernel to recognize the display, and setup the framebuffer, so as to display beautiful images like this one: That’s more colorful (running fb-test) Setting up the no-screen VM First, let’s create a simple system base... </summary> </entry> <entry><title>Fulling theming macOS Big Sur</title><link href="https://machxnu.github.io/posts/macOS-theming/" rel="alternate" type="text/html" title="Fulling theming macOS Big Sur" /><published>2022-09-05T20:50:00+02:00</published> <updated>2022-09-05T20:55:05+02:00</updated> <id>https://machxnu.github.io/posts/macOS-theming/</id> <content src="https://machxnu.github.io/posts/macOS-theming/" /> <author> <name>MachXNU</name> </author> <summary> Introduction Everyone with a jailbroken has probably already themed their iPhone, right ? Well, actually, you don’t even need to be jailbroken to enjoy alternative icons on iOS, but theming has been a long tradition in the jailbreak community. Felicity Pro and Dotto+ on iPhone 11 So, why not doing the same on macOS ? Well, mostly because, just like iOS, it’s not possible on stock. While yo... </summary> </entry> </feed>
